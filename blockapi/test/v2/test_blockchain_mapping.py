import pytest

from blockapi.v2.blockchain_mapping import (
    get_blockchain_from_chain_id,
    get_blockchain_from_coingecko_chain,
    get_blockchain_from_debank_chain,
    get_blockchain_from_rango_chain,
)
from blockapi.v2.models import Blockchain


def test_map_case():
    assert get_blockchain_from_rango_chain('TERRA') == Blockchain.TERRA


def test_map_none():
    assert not get_blockchain_from_rango_chain(None)


@pytest.mark.parametrize(
    'chain,expected',
    [
        ('ShibChain', Blockchain.SHIBA_CHAIN),
        ('aelf', Blockchain.AELF),
        ('aleph-zero', Blockchain.ALEPH_ZERO),
        ('alienx', Blockchain.ALIEN_X),
        ('ancient8', Blockchain.ANCIENT8),
        ('apechain', Blockchain.APECHAIN),
        ('aptos', Blockchain.APTOS),
        ('archway', Blockchain.ARCHWAY),
        ('areon-network', Blockchain.AREON),
        ('astar-zkevm', Blockchain.ASTAR_ZKEVM),
        ('bahamut', Blockchain.BAHAMUT),
        ('base', Blockchain.BASE),
        ('bifrost-network', Blockchain.BIFROST),
        ('bitcanna', Blockchain.BITCANNA),
        ('bitkub-chain', Blockchain.BITKUB_CHAIN),
        ('bitlayer', Blockchain.BIT_LAYER),
        ('bittorrent', Blockchain.BIT_TORRENT),
        ('blast', Blockchain.BLAST),
        ('bob-network', Blockchain.BOB),
        ('bouncebit', Blockchain.BOUNCE_BIT),
        ('bsquared-network', Blockchain.B2),
        ('callisto', Blockchain.CALLISTO),
        ('casper-network', Blockchain.CASPER),
        ('chia', Blockchain.CHIA),
        ('chihuahua', Blockchain.CHIHUAHUA),
        ('comdex', Blockchain.COMDEX),
        ('core', Blockchain.CORE_CHAIN),
        ('coreum', Blockchain.COREUM),
        ('crescent', Blockchain.CRESCENT),
        ('cronos-zkevm', Blockchain.CRONOS_ZKEVM),
        ('defi-kingdoms-blockchain', Blockchain.DEFI_KINGDOMS),
        ('defichain', Blockchain.DEFI),
        ('defichain-evm', Blockchain.DEFICHAIN_EVM),
        ('defiverse', Blockchain.DEFIVERSE),
        ('drc-20', Blockchain.DRC_20),
        ('elysium', Blockchain.ELYSIUM),
        ('empire', Blockchain.EMPIRE),
        ('endurance', Blockchain.ENDURANCE),
        ('eos-evm', Blockchain.EOS),
        ('etherlink', Blockchain.ETHERLINK),
        ('exosama', Blockchain.EXOSAMA),
        ('filecoin', Blockchain.FILECOIN),
        ('flare-network', Blockchain.FLARE),
        ('flow-evm', Blockchain.FLOW),
        ('fraxtal', Blockchain.FRAXTAL),
        ('function-x', Blockchain.FUNCTION_X),
        ('galachain', Blockchain.GALA),
        ('genesys-network', Blockchain.GENESYS),
        ('graphlinq-chain', Blockchain.GRAPHLINQ_CHAIN),
        ('gravity-alpha', Blockchain.GRAVITY_ALPHA),
        ('gravity-bridge', Blockchain.GRAVITY_BRIDGE),
        ('haqq-network', Blockchain.HAQQ_NETWORK),
        ('hoo', Blockchain.HOO_SMART_CHAIN),
        ('hyperliquid', Blockchain.HYPERLIQUID),
        ('hypra-network', Blockchain.HYPRA_NETWORK),
        ('immutable', Blockchain.IMMUTABLE),
        ('inevm', Blockchain.INEVM),
        ('iota-evm', Blockchain.IOTA_EVM),
        ('kadena', Blockchain.KADENA),
        ('kasplex', Blockchain.KASPLEX),
        ('kujira', Blockchain.KUJIRA),
        ('laikachain', Blockchain.LAIKACHAIN),
        ('linea', Blockchain.LINEA),
        ('lisk', Blockchain.LISK),
        ('mainnetz', Blockchain.MAINNETZ),
        ('mantle', Blockchain.MANTLE),
        ('massa', Blockchain.MASSA),
        ('meld', Blockchain.MELD),
        ('merlin-chain', Blockchain.MERLIN_CHAIN),
        ('metal-l2', Blockchain.METAL_L2),
        ('mode', Blockchain.MODE),
        ('neon-evm', Blockchain.NEON_EVM),
        ('noble', Blockchain.NOBLE),
        ('oasis', Blockchain.OASIS_CHAIN),
        ('oasis-sapphire', Blockchain.OASIS_SAPPHIRE),
        ('oasys', Blockchain.OASYS),
        ('octaspace', Blockchain.OCTA_SPACE),
        ('omax', Blockchain.OMAX),
        ('omniflix', Blockchain.OMNIFLIX),
        ('onchain', Blockchain.ONCHAIN),
        ('onus', Blockchain.ONUS_CHAIN),
        ('opbnb', Blockchain.OPTIMISTIC_BNB),
        ('oraichain', Blockchain.ORAI),
        ('ordinals', Blockchain.ORDINALS),
        ('orenium', Blockchain.ORENIUM),
        ('picasso', Blockchain.PICASSO),
        ('polygon-zkevm', Blockchain.POLYGON_ZK_EVM),
        ('proof-of-memes', Blockchain.PROOF_OF_MEMES),
        ('pulsechain', Blockchain.PULSE),
        ('q-mainnet', Blockchain.Q_MAINNET),
        ('ql1', Blockchain.QL1),
        ('quicksilver', Blockchain.QUICKSILVER),
        ('rails-network', Blockchain.RAILS),
        ('re-al', Blockchain.REAL),
        ('rollux', Blockchain.ROLLUX),
        ('rss3-vsl', Blockchain.RSS3_VSL),
        ('saakuru', Blockchain.SAAKURU),
        ('saga', Blockchain.SAGA),
        ('saita-chain', Blockchain.SAITA),
        ('sanko', Blockchain.SANKO),
        ('sei-network', Blockchain.SEI_NETWORK),
        ('sei-v2', Blockchain.SEI_V2),
        ('sge', Blockchain.SGE),
        ('shibarium', Blockchain.SHIBARIUM),
        ('sui', Blockchain.SUI),
        ('tdvv-sidechain', Blockchain.TDVV_SIDECHAIN),
        ('tenet', Blockchain.TENET),
        ('terra-2', Blockchain.TERRA_2),
        ('the-open-network', Blockchain.OPEN_NETWORK),
        ('trustless-computer', Blockchain.TRUSTLESS_COMPUTER),
        ('valobit', Blockchain.VALOBIT),
        ('venom', Blockchain.VENOM),
        ('wax', Blockchain.WAX),
        ('wemix-network', Blockchain.WEMIX_NETWORK),
        ('world-chain', Blockchain.WORLD_CHAIN),
        ('xpla', Blockchain.XPLA),
        ('zedxion', Blockchain.ZEDXION),
        ('zetachain', Blockchain.ZETA_CHAIN),
        ('zircuit', Blockchain.ZIRCUIT),
        ('zkfair', Blockchain.ZKFAIR),
        ('zksync', Blockchain.ZKSYNC_ERA),
        ('zora-network', Blockchain.ZORA),
    ],
)
def test_map_coingecko(chain: str, expected: Blockchain):
    assert get_blockchain_from_coingecko_chain(chain) == expected


def test_map_by_id():
    assert get_blockchain_from_chain_id(1) == Blockchain.ETHEREUM


@pytest.mark.parametrize(
    'chain,expected',
    [
        ('a8', Blockchain.ANCIENT8),
        ('ace', Blockchain.ENDURANCE),
        ('ailayer', Blockchain.AI_LAYER),
        ('alienx', Blockchain.ALIEN_X),
        ('alot', Blockchain.DEX_ALOT),
        ('ape', Blockchain.APE),
        ('apex', Blockchain.PROOF_OF_PLAY_APEX),
        ('aura', Blockchain.AURA),
        ('aze', Blockchain.ASTAR_ZKEVM),
        ('b2', Blockchain.B2),
        ('bb', Blockchain.BOUNCE_BIT),
        ('bevm', Blockchain.BEVM),
        ('bfc', Blockchain.BIFROST),
        ('bob', Blockchain.BOB),
        ('brise', Blockchain.BITGERT),
        ('btr', Blockchain.BIT_LAYER),
        ('cfx', Blockchain.CONFLUX),
        ('ckb', Blockchain.GODWOKEN),
        ('combo', Blockchain.COMBO),
        ('croze', Blockchain.CRONOS_ZKEVM),
        ('cyber', Blockchain.CYBER),
        ('dbk', Blockchain.DBK),
        ('degen', Blockchain.DEGEN),
        ('doge', Blockchain.DOGECHAIN),
        ('dym', Blockchain.DYMENSION),
        ('ela', Blockchain.ELASTOS),
        ('eon', Blockchain.HORIZEN_EON),
        ('era', Blockchain.ZKSYNC_ERA),
        ('ethlink', Blockchain.ETHERLINK),
        ('fon', Blockchain.FON_CHAIN),
        ('frax', Blockchain.FRAXTAL),
        ('fx', Blockchain.FUNCTION_X),
        ('iota', Blockchain.IOTA_EVM),
        ('itze', Blockchain.IMMUTABLE),
        ('karak', Blockchain.KARAK),
        ('kroma', Blockchain.KROMA),
        ('lumio', Blockchain.SUPER_LUMIO),
        ('lyra', Blockchain.DERIVE),
        ('mada', Blockchain.MILKOMEDA_C1),
        ('manta', Blockchain.MANTA_PACIFIC),
        ('map', Blockchain.MAP_PROTOCOL),
        ('merlin', Blockchain.MERLIN_CHAIN),
        ('mint', Blockchain.MINT),
        ('molten', Blockchain.MOLTEN),
        ('morph', Blockchain.MORPH),
        ('neon', Blockchain.NEON_EVM),
        ('nova', Blockchain.ARBITRUM_NOVA),
        ('orderly', Blockchain.ORDERLY),
        ('platon', Blockchain.PLAT_ON),
        ('pze', Blockchain.POLYGON_ZK_EVM),
        ('reya', Blockchain.REYA),
        ('rsk', Blockchain.RSK),
        ('savm', Blockchain.SATOSHI_VM_ALPHA),
        ('scrl', Blockchain.SCROLL),
        ('sei', Blockchain.SEI),
        ('shape', Blockchain.SHAPE),
        ('shib', Blockchain.SHIBARIUM),
        ('smr', Blockchain.SHIMMER_EVM),
        ('sonic', Blockchain.SONIC),
        ('step', Blockchain.STEP_NETWORK),
        ('strax', Blockchain.STRATIS),
        ('swell', Blockchain.SWELL),
        ('sx', Blockchain.SX_NETWORK),
        ('taiko', Blockchain.TAIKO),
        ('tomb', Blockchain.TOMBCHAIN),
        ('ulx', Blockchain.ULTRON),
        ('world', Blockchain.WORLD_CHAIN),
        ('wyzth', Blockchain.WYZTH),
        ('xlayer', Blockchain.X_LAYER),
        ('zero', Blockchain.ZERO),
        ('zeta', Blockchain.ZETA_CHAIN),
        ('zircuit', Blockchain.ZIRCUIT),
        ('zklink', Blockchain.ZKLINK_NOVA),
        ('gravity', Blockchain.GRAVITY),
    ],
)
def test_map_debank(chain: str, expected: Blockchain):
    assert get_blockchain_from_debank_chain(chain) == expected
